def sonarQGStatus = ''

pipeline {
    agent {
        label 'azure-docker'
    }
    options {
        buildDiscarder(
            logRotator(numToKeepStr: '5')
        )
        timestamps()
        disableConcurrentBuilds()
        timeout(
            time: 1,
            unit: 'HOURS'
        )
        durabilityHint('PERFORMANCE_OPTIMIZED')
        ansiColor('xterm')
    }
    environment {
        PATH = "$PATH:$HOME/.local/bin"
        APP_NAME = 'flask-api-pizzaapp'
        TAG_NAME = "${env.GIT_BRANCH.replaceAll('/', '-').take(23)}-${env.BUILD_NUMBER}"
        TARGET_ENV = 'dev-env'
        AZURE_SP = credentials('azure-aks-testcluster-service-principal')
        AZURE_REGISTRY_USR = '00000000-0000-0000-0000-000000000000'
        TECHNICAL_ACCOUNT = credentials('technical-account-ldap')
        PRIVATE_REGISTRY_ADDRESS = 'nexus3.k8s.lan:50000'
    }
    parameters {
        booleanParam(
            name: 'RUN_LINTER',
            defaultValue: true,
            description: 'Do you want to perform pylint evaluation?'
        )
        booleanParam(
            name: 'RUN_OWASP_DC',
            defaultValue: true,
            description: 'Do you want to run OWASP dependency-check?'
        )
        booleanParam(
            name: 'RUN_TESTS',
            defaultValue: true,
            description: 'Do you want to run test phase?'
        )
        booleanParam(
            name: 'RUN_SONARQUBE',
            defaultValue: true,
            description: 'Do you want to perform Sonarqube analysis?'
        )
        booleanParam(
            name: 'CREATE_IMAGE',
            defaultValue: false,
            description: 'Do you want to create and push image to registy?'
        )
        booleanParam(
            name: 'DEPLOY_TO_ENV',
            defaultValue: false,
            description: 'Do you want to deploy image to target environment?'
        )
    }
    stages {
        stage('Prepare variables') {
            steps {
                script {
                    dbCredentialsId = 'flask-api-pizzaapp-database-dev-env'
                    echo "Git repo url: ${env.GIT_URL}"
                    echo "Git branch: ${env.GIT_BRANCH}"
                    echo 'Exposing Azure-specific env variables...'
                    configFileProvider([
                        configFile(
                            fileId: 'azure-config',
                            variable: 'AZURE_CONFIGURATION'
                        )
                    ]) {
                        // Split by each line, then split by '=' and remove quotes
                        azureVariables = readFile("${env.AZURE_CONFIGURATION}").split('\n').collect { azVar ->
                            azVar.split('=').last().replaceAll("^\"|^\'|\'\$|\"\$", "")
                        }
                        env.AZURE_SUBSCRIPTION_ID = azureVariables[0]
                        env.AZURE_TENANT = azureVariables[1]
                        env.AZURE_TENANT_ID = azureVariables[2]
                        env.AZURE_KUBE_CLUSTER_NAME = azureVariables[3]
                        env.AZURE_REGISTRY_ADDRESS = azureVariables[4]
                        env.AZURE_RESOURCE_GROUP_NAME = azureVariables[5]
                        env.AZURE_INGRESS_DOMAIN = azureVariables[6]
                    }
                    echo 'Exposing rest of variables...'
                    env.INGRESS_HOST = "${env.APP_NAME}-${env.TARGET_ENV}.${env.AZURE_INGRESS_DOMAIN}"
                }
            }
        }
        stage('Install packages') {
            steps {
                sh 'pip install -r requirements.txt'
            }
        }
        stage('Run linter') {
            when { expression { params.RUN_LINTER } }
            steps {
                sh 'find . -name \\*.py | xargs pylint -f parseable | tee pylint.log'
                recordIssues(
                    tool: pyLint(pattern: 'pylint.log')
                )
            }
        }
        stage('Run OWASP dependency-check') {
            when { expression { params.RUN_OWASP_DC } }
            steps {
                dependencyCheck(
                    odcInstallation: ''
                )
                dependencyCheckPublisher(
                    pattern: 'dependency-check-report.xml'
                )
            }
        }
        stage('Run tests') {
            when { expression { params.RUN_TESTS } }
            steps {
                sh '''
                pytest --cov=pizzaapp \
                --cov-report xml:coverage-reports/pycov/report.xml
                '''
                publishCoverage(
                    adapters: [
                        coberturaAdapter(
                            path: 'coverage-reports/pycov/report.xml',
                        )
                    ]
                )
            }
        }
        stage('Run Sonarqube analysis') {
            when { expression { params.RUN_SONARQUBE } }
            steps {
                script {
                    def scannerHome = tool('sonarqube_scanner_default')
                    def nodeHome = tool('nodejs_default')
                    withEnv(["PATH+EXTRA=${scannerHome}/bin:${nodeHome}/bin"]) {
                        withSonarQubeEnv('sonarqube_default') {
                            sh('sonar-scanner')
                        }
                        timeout(time: 10, unit: 'MINUTES') {
                            def qg = waitForQualityGate()
                            if (qg.status != 'OK') {
                                error "Pipeline aborted due to quality gate failure: ${qg.status}"
                            } else {
                                sonarQGStatus = qg.status
                            }
                        }
                    }
                }
            }
        }
        stage('Create Docker image') {
            when { expression { params.CREATE_IMAGE } }
            steps {
                script {
                    if (!params.RUN_LINTER || !params.RUN_TESTS || !params.RUN_SONARQUBE) {
                        error('You canot create image without passing all previous stages!')
                    }
                    echo "Building image with tag: ${env.TAG_NAME}"
                    sh '''
                    echo "$TECHNICAL_ACCOUNT_PSW" | \
                    docker login $PRIVATE_REGISTRY_ADDRESS --username $TECHNICAL_ACCOUNT_USR --password-stdin
                    '''
                    sh """
                    docker build . --pull --network host \
                    --tag ${env.APP_NAME}:${env.TAG_NAME} \
                    --label COMMIT_ID=${env.GIT_COMMIT} \
                    --label BRANCH=${env.GIT_BRANCH} \
                    --label BUILD_NO=${env.BUILD_NUMBER} \
                    --label SONAR_QG_STATUS=${sonarQGStatus}
                    """
                    sh '''
                    az login --service-principal \
                    --username $AZURE_SP_USR \
                    --password $AZURE_SP_PSW \
                    --tenant $AZURE_TENANT
                    az acr login --name $AZURE_REGISTRY_ADDRESS --expose-token \
                    --output tsv --query accessToken | \
                    docker login $AZURE_REGISTRY_ADDRESS --username $AZURE_REGISTRY_USR --password-stdin
                    docker tag ${APP_NAME}:${TAG_NAME} ${AZURE_REGISTRY_ADDRESS}/${APP_NAME}:${TAG_NAME}
                    docker push ${AZURE_REGISTRY_ADDRESS}/${APP_NAME}:${TAG_NAME}
                    '''
                }
            }
        }
        stage('Deploy to target environment') {
            when { expression { params.DEPLOY_TO_ENV } }
            steps {
                script {
                    if (!params.RUN_LINTER || !params.RUN_TESTS || !params.RUN_SONARQUBE || !params.CREATE_IMAGE) {
                        error('You canot perform deployment without passing all previous stages!')
                    }
                    echo "Deploying to ${env.TARGET_ENV}"
                    withCredentials([
                        usernamePassword(
                            credentialsId: dbCredentialsId,
                            passwordVariable: 'DATABASE_CRED_PSW',
                            usernameVariable: 'DATABASE_CRED_USR'
                        )
                    ]) {
                        sh '''
                        az aks get-credentials --resource-group $AZURE_RESOURCE_GROUP_NAME \
                        --name $AZURE_KUBE_CLUSTER_NAME --admin
                        helm upgrade --install $APP_NAME ./helm/$APP_NAME \
                        --wait \
                        --timeout 10m \
                        --atomic \
                        --namespace "$TARGET_ENV" \
                        --values ./helm/environments/${TARGET_ENV}.yaml \
                        --set image.repository="${AZURE_REGISTRY_ADDRESS}/${APP_NAME}" \
                        --set image.tag="${TAG_NAME}" \
                        --set ingress.host="${INGRESS_HOST}" \
                        --set env.secrets.FLASK_DB_USER="${DATABASE_CRED_USR}" \
                        --set env.secrets.FLASK_DB_PASS="${DATABASE_CRED_PSW}"
                        '''
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                sh '''
                az login --service-principal \
                --username $AZURE_SP_USR \
                --password $AZURE_SP_PSW \
                --tenant $AZURE_TENANT
                '''
                // Get all images, sort out release versions (reverse grep)
                obsoleteImageList = sh(
                    returnStdout: true,
                    script: '''
                    az acr manifest metadata list --registry $AZURE_REGISTRY_ADDRESS \
                    --name $APP_NAME --orderby time_asc \
                    --query "[?lastUpdateTime < '$(date --date='-30 days' '+%Y-%m-%d')'].tags[]" -o tsv |\
                    grep -v '[0-9]\\+.[0-9]\\+.[0-9]\\+' || true
                    '''
                ).split()
                if (obsoleteImageList) {
                    obsoleteImageList.each { imageTag ->
                        echo "Deleting ${imageTag} -> older than 30 days!"
                        sh """
                        az acr repository delete --name ${env.AZURE_REGISTRY_ADDRESS} \
                        --image ${env.APP_NAME}:${imageTag}
                        """
                    }
                } else {
                    echo 'No images older than 30 days'
                }
            }
        }
        cleanup {
            cleanWs()
        }
    }
}
