@Library('jenkins-shared-libs') _

def leakedSecretsCheck = 'UNKNOWN'
def dependencySecurityCheck = 'UNKNOWN'
def sonarQgStatus = 'UNKNOWN'

pipeline {
    agent {
        label 'azure'
    }
    options {
        buildDiscarder(
            logRotator(numToKeepStr: '5')
        )
        timestamps()
        disableConcurrentBuilds()
        timeout(
            time: 1,
            unit: 'HOURS'
        )
        durabilityHint('PERFORMANCE_OPTIMIZED')
        ansiColor('xterm')
    }
    environment {
        PATH = "$PATH:$HOME/.local/bin"
        APP_NAME = 'flask-api-pizzaapp'
        TAG_NAME = "${env.GIT_BRANCH.replaceAll('/', '-').take(23)}-${env.BUILD_NUMBER}"
        TARGET_ENV = 'dev-env'
        AZURE_SP = credentials('azure-sp')
        TECHNICAL_ACCOUNT = credentials('technical-account-ldap')
        PRIVATE_REGISTRY_ADDRESS = 'nexus3.k8s.lan:50000'
        PRIVATE_REGISTRY_ADDRESS_PULL = 'nexus3.k8s.lan:50001'
    }
    parameters {
        booleanParam(
            name: 'RUN_LEAKED_SECRETS_CHECK',
            defaultValue: true,
            description: 'Do you want to run checks again leaked secrets in your branch?'
        )
        booleanParam(
            name: 'RUN_LINTER',
            defaultValue: true,
            description: 'Do you want to perform pylint evaluation?'
        )
        booleanParam(
            name: 'RUN_UNIT_TESTS',
            defaultValue: true,
            description: 'Do you want to run unit test stage?'
        )
        booleanParam(
            name: 'RUN_DEPENDENCY_SECURITY_CHECK',
            defaultValue: true,
            description: 'Do you want to run security checks on python dependencies?'
        )
        booleanParam(
            name: 'RUN_SONARQUBE',
            defaultValue: true,
            description: 'Do you want to perform SCA using Sonarqube analysis?'
        )
        booleanParam(
            name: 'RUN_CHECKOV',
            defaultValue: true,
            description: 'Do you want to perform SCA using checkov on Docker, k8s and helm resources?'
        )
        booleanParam(
            name: 'CREATE_IMAGE',
            defaultValue: false,
            description: 'Do you want to create and push image to registy?'
        )
        booleanParam(
            name: 'DEPLOY_TO_ENV',
            defaultValue: false,
            description: 'Do you want to deploy image to target environment?'
        )
    }
    stages {
        stage('Prepare variables') {
            steps {
                script {
                    dbCredentialsId = 'flask-api-pizzaapp-database-dev-env'
                    echo "Git repo url: ${env.GIT_URL}"
                    echo "Git branch: ${env.GIT_BRANCH}"
                    // Exposing multiple variables like AZURE_SUBSCRIPTION_ID etc.
                    exposeVariablesFromConfigFile(configFileProviderFileId: 'azure-config')
                    echo 'Exposing rest of variables...'
                    env.INGRESS_HOST = "${env.APP_NAME}-${env.TARGET_ENV}.${env.AZURE_INGRESS_DOMAIN}"
                    sh '''
                    az login --service-principal \
                    --username $AZURE_SP_USR \
                    --password $AZURE_SP_PSW \
                    --tenant $AZURE_TENANT
                    '''
                }
            }
        }
        stage('Install packages') {
            steps {
                sh 'cp requirements.txt requirements-dev.txt'
                /*
                Replace psycopg2 by psycopg2 to avoid compilation
                and erros caused by missling libpq-dev package on
                Jenkins node image; psycopg2-binary is not recommended
                for production usage
                */ 
                sh 'sed -i \'s/psycopg2/psycopg2-binary/g\' requirements-dev.txt'
                sh 'pip install -r requirements-dev.txt'
            }
        }
        stage('Run leaked-secrets check') {
            when { expression { params.RUN_LEAKED_SECRETS_CHECK } }
            steps {
                script {
                    def trufflehogHome = tool('trufflehog_default')
                    withEnv(["PATH+EXTRA=${trufflehogHome}"]) {
                        try {
                            sh 'trufflehog git ${GIT_URL} --branch ${GIT_BRANCH} --fail'
                            leakedSecretsCheck = 'OK'
                            echo 'Leaked-secrets check passed!'
                        } catch(Exception e) {
                            leakedSecretsCheck = 'NOK'
                            error('Leaked-secrets check failed!')
                        }
                    }
                }
            }
        }
        stage('Run linter') {
            when { expression { params.RUN_LINTER } }
            steps {
                sh 'find . -name \\*.py | xargs pylint -f parseable | tee pylint.log'
                recordIssues(
                    tool: pyLint(pattern: 'pylint.log')
                )
            }
        }
        stage('Run unit tests') {
            when { expression { params.RUN_UNIT_TESTS } }
            steps {
                sh '''
                pytest --cov=pizzaapp \
                --cov-report xml:coverage-reports/pycov/report.xml \
                --junitxml pytest-results.xml 
                '''
                recordCoverage(
                    skipPublishingChecks: true,
                    tools: [
                        [parser: 'COBERTURA', pattern: 'coverage-reports/pycov/report.xml']
                    ]
                )
                junit(
                    allowEmptyResults: true,
                    skipMarkingBuildUnstable: true,
                    skipPublishingChecks: true,
                    testResults: 'pytest-results.xml'
                )
            }
        }
        stage('Run security checks on dependencies') {
            when { expression { params.RUN_DEPENDENCY_SECURITY_CHECK } }
            steps {
                script {
                    try {
                        sh '''
                        pip3 install safety
                        safety check -r requirements.txt
                        '''
                        dependencySecurityCheck = 'OK'
                    } catch(Exception e) {
                        dependencySecurityCheck = 'NOK'
                        unstable('Security checks on dependencies failed!')
                    }
                    //TODO: save output as junit-like xml https://github.com/pyupio/safety/pull/190
                }
            }
        }
        // TODO: add liccheck https://pypi.org/project/liccheck/
        stage('Run Sonarqube analysis') {
            when { expression { params.RUN_SONARQUBE } }
            steps {
                script {
                    runSonarQubeAnalysis.scanner(
                        sonarScannerToolId: 'sonarqube_scanner_default',
                        nodeJsToolId: 'nodejs_default',
                        sonarQubeServerId: 'sonarqube_default'
                    )
                    sonarQgStatus = runSonarQubeAnalysis.checkQualityGateResult()
                }
            }
        }
        stage('Run checkov over docker and helm') {
            when { expression { params.RUN_CHECKOV } }
            steps {
                sh 'pip3 install checkov'
                sh 'checkov --config-file ./checkov-docker.yml'
                sh 'checkov --config-file ./checkov-helm.yml'
                junit(
                    allowEmptyResults: true,
                    skipMarkingBuildUnstable: false,
                    skipPublishingChecks: true,
                    testResults: 'checkov-results*.xml'
                )
            }
        }
        stage('Create Docker image') {
            when { expression { params.CREATE_IMAGE } }
            steps {
                container(name: 'kaniko') {
                    script {
                        if (!params.RUN_LEAKED_SECRETS_CHECK || !params.RUN_LINTER || !params.RUN_UNIT_TESTS) {
                            error(
                                'You canot create image without passing at least: linter, ' +
                                'unit tests and leaked-secrets stages!'
                            )
                        }
                        echo "Building image with tag: ${env.TAG_NAME}"
                        /* 
                        BUG: https://github.com/GoogleContainerTools/kaniko/issues/1212#issuecomment-971623379
                        All commands have to be performed inside withEnv wrapper
                        */
                        withEnv(["PATH+EXTRA=/kaniko:/busybox"]) {
                            // TODO: Create shared lib
                            echo 'Creating auth configuration'
                            azureRegistryCredsEnc = sh(
                                script: 'set +x; echo -n "${AZURE_SP_USR}:${AZURE_SP_PSW}" | base64',
                                returnStdout: true
                            ).trim()
                            nexusRegistryCredsEnc = sh(
                                script: 'set +x; echo -n "${TECHNICAL_ACCOUNT_USR}:${TECHNICAL_ACCOUNT_PSW}" | base64',
                                returnStdout: true
                            ).trim()
                            configJson = [
                                "auths": [
                                    "${env.AZURE_REGISTRY_ADDRESS}": [
                                        "auth": azureRegistryCredsEnc
                                    ],
                                    "${env.PRIVATE_REGISTRY_ADDRESS}": [
                                        "auth": nexusRegistryCredsEnc
                                    ],
                                    "${env.PRIVATE_REGISTRY_ADDRESS_PULL}": [
                                        "auth": nexusRegistryCredsEnc
                                    ]
                                ]
                            ]
                            writeJSON(file: 'config.json', json: configJson)
                            sh """
                            mv config.json /kaniko/.docker/config.json
                            /kaniko/executor --dockerfile="./Dockerfile" \
                            --destination="${AZURE_REGISTRY_ADDRESS}/${APP_NAME}:${TAG_NAME}" \
                            --context="." --insecure --insecure-pull \
                            --label COMMIT_ID=${env.GIT_COMMIT} \
                            --label BRANCH=${env.GIT_BRANCH} \
                            --label BUILD_NO=${env.BUILD_NUMBER} \
                            --label LEAKED_SECRETS_CHECK=${leakedSecretsCheck} \
                            --label DEPENDENCY_SECURITY_CHECK=${dependencySecurityCheck} \
                            --label SONAR_QG_STATUS=${sonarQgStatus}
                            """
                        }
                    }
                }
            }
        }
        // TODO: Implement Clair as Static Analysis for container image
        stage('Deploy to target environment') {
            when { expression { params.DEPLOY_TO_ENV } }
            steps {
                script {
                    if (!params.RUN_LEAKED_SECRETS_CHECK || !params.RUN_LINTER || !params.RUN_UNIT_TESTS || !params.CREATE_IMAGE) {
                        error(
                            'You canot create image without passing at least: linter, unit tests, ' +
                            'leaked-secrets check and create docker image stages!'
                        )
                    }
                    echo "Deploying to ${env.TARGET_ENV}"
                    withCredentials([
                        usernamePassword(
                            credentialsId: dbCredentialsId,
                            passwordVariable: 'DATABASE_CRED_PSW',
                            usernameVariable: 'DATABASE_CRED_USR'
                        )
                    ]) {
                        sh '''
                        az aks get-credentials --resource-group $AZURE_RESOURCE_GROUP_NAME \
                        --name $AZURE_KUBE_CLUSTER_NAME --admin
                        helm upgrade --install $APP_NAME ./helm/$APP_NAME \
                        --wait \
                        --timeout 10m \
                        --atomic \
                        --namespace "$TARGET_ENV" \
                        --values ./helm/environments/${TARGET_ENV}.yaml \
                        --set image.repository="${AZURE_REGISTRY_ADDRESS}/${APP_NAME}" \
                        --set image.tag="${TAG_NAME}" \
                        --set ingress.host="${INGRESS_HOST}" \
                        --set env.secrets.FLASK_DB_USER="${DATABASE_CRED_USR}" \
                        --set env.secrets.FLASK_DB_PASS="${DATABASE_CRED_PSW}"
                        '''
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                sh '''
                az login --service-principal \
                --username $AZURE_SP_USR \
                --password $AZURE_SP_PSW \
                --tenant $AZURE_TENANT
                '''
                // Get all images, sort out release versions (reverse grep)
                obsoleteImageList = sh(
                    returnStdout: true,
                    script: '''
                    az acr manifest metadata list --registry $AZURE_REGISTRY_ADDRESS \
                    --name $APP_NAME --orderby time_asc \
                    --query "[?lastUpdateTime < '$(date --date='-30 days' '+%Y-%m-%d')'].tags[]" -o tsv |\
                    grep -v '[0-9]\\+.[0-9]\\+.[0-9]\\+' || true
                    '''
                ).split()
                if (obsoleteImageList) {
                    obsoleteImageList.each { imageTag ->
                        echo "Deleting ${imageTag} -> older than 30 days!"
                        sh """
                        az acr repository delete --yes --name ${env.AZURE_REGISTRY_ADDRESS} \
                        --image ${env.APP_NAME}:${imageTag}
                        """
                    }
                } else {
                    echo 'No images older than 30 days'
                }
            }
        }
        cleanup {
            cleanWs()
        }
    }
}
