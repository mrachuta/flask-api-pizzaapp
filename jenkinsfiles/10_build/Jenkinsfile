def sonarQGStatus = ''

pipeline {
    agent {
        label 'python'
    }
    options {
        buildDiscarder(
            logRotator(numToKeepStr: '5')
        )
        timestamps()
        disableConcurrentBuilds()
        timeout(
            time: 1,
            unit: 'HOURS'
        )
        durabilityHint('PERFORMANCE_OPTIMIZED')
    }
    environment {
        PATH = "$PATH:$HOME/.local/bin"
    }
    parameters {
        booleanParam(
            name: 'RUN_LINTER',
            defaultValue: true,
            description: 'Do you want to perform pylint evaluation?'
        )
        booleanParam(
            name: 'RUN_TESTS',
            defaultValue: true,
            description: 'Do you want to run test phase?'
        )
        booleanParam(
            name: 'RUN_SONARQUBE',
            defaultValue: true,
            description: 'Do you want to perform Sonarqube analysis?'
        )
        booleanParam(
            name: 'DEPLOY_IMAGE',
            defaultValue: false,
            description: 'Do you want to push image to registy?'
        )
        booleanParam(
            name: 'CREATE_RELEASE',
            defaultValue: false,
            description: 'Do you want to create release package?'
        )
    }
    stages {
        stage('Install packages') {
            steps {
                sh 'pip install -r requirements.txt'
            }
        }
        stage('Run linter') {
            when { expression { params.RUN_LINTER } }
            steps {
                sh 'find . -name \\*.py | xargs pylint -f parseable | tee pylint.log'
                recordIssues(
                    tool: pyLint(pattern: 'pylint.log'),
                    unstableTotalHigh: 100,
                )
            }
        }
        stage('Run tests') {
            when { expression { params.RUN_TESTS } }
            steps {
                sh '''
                pytest --cov=pizzaapp \
                --cov-report xml:coverage-reports/pycov/report.xml
                '''
                publishCoverage(
                    adapters: [
                        coberturaAdapter(
                            path: 'coverage-reports/pycov/report.xml',
                            thresholds: [
                                [
                                    thresholdTarget: 'Aggregated Report',
                                    unhealthyThreshold: 30.0,
                                    unstableThreshold: 50.0
                                ]
                            ]
                        )
                    ],
                    sourceFileResolver: sourceFiles('NEVER_STORE')
                )
            }
        }
        stage('Run Sonarqube analysis') {
            when { expression { params.RUN_SONARQUBE } }
            steps {
                script {
                    def scannerHome = tool('sonarqube_scanner_default')
                    withSonarQubeEnv('sonarqube_default') {
                        sh("${scannerHome}/bin/sonar-scanner")
                    }
                    timeout(time: 10, unit: 'MINUTES') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        } else {
                            sonarQGStatus = qg.status
                        }
                    }
                }
            }
        }
        stage('Create Docker image') {
            when { expression { params.DEPLOY_IMAGE } }
            steps {
                script {
                    tagName = "${env.GIT_BRANCH.tokenize('/').last().take(20)}-${env.BUILD_NUMBER}"
                    echo "Building image with tag: ${tagName}"
                    sh """
                    docker build . -t flask-api-pizzaapp:${tagName} \
                    --label COMMIT_ID=${env.GIT_COMMIT} \
                    --label BRANCH=${env.GIT_BRANCH} \
                    --label BUILD_NO=${env.BUILD_NUMBER} \
                    --label SONAR_QG_STATUS=${sonarQGStatus}
                    """
                }
            }
        }
    }
}
