@Library('jenkins-shared-libs') _

pipeline {
    agent {
        // Use new pod template
        label 'azure'
    }
    options {
        buildDiscarder(
            logRotator(numToKeepStr: '5')
        )
        timestamps()
        disableConcurrentBuilds()
        timeout(
            time: 1,
            unit: 'HOURS'
        )
        durabilityHint('PERFORMANCE_OPTIMIZED')
        ansiColor('xterm')
    }
    environment {
        PATH = "$PATH:$HOME/.local/bin"
        AZURE_SP = credentials('azure-sp')
    }
    parameters {
        booleanParam(
            name: 'RUN_TESTS',
            defaultValue: true,
            description: 'Do you want to run tests?'
        )
        booleanParam(
            name: 'RUN_CHECKOV',
            defaultValue: true,
            description: 'Do you want to run checkov?'
        )
        booleanParam(
            name: 'DEPLOY_ACR',
            defaultValue: false,
            description: 'Do you want to deploy / keep Azure Container Registry?\n' +
            '(ignored during destroy)'
        )
        booleanParam(
            name: 'DEPLOY_AKS',
            defaultValue: false,
            description: 'Do you want to deploy / keep Azure Kubernetes Service?\n' +
            '(ignored during destroy)'
        )
        booleanParam(
            name: 'DEPLOY_K8S_RESOURCES',
            defaultValue: false,
            description: 'Do you want to deploy Kubernetes resources?'
        )
        choice(
            choices: ['plan', 'apply', 'plan -destroy', 'destroy'],
            description: 'Select terraform action',
            name: 'TF_ACTION'
        )
    }
    stages {
        stage('Prepare variables') {
            steps {
                script {
                    dbCredentialsId = 'flask-api-pizzaapp-database-dev-env'
                    echo "Git repo url: ${env.GIT_URL}"
                    echo "Git branch: ${env.GIT_BRANCH}"
                    // Exposing multiple variables like AZURE_SUBSCRIPTION_ID etc.
                    exposeVariablesFromConfigFile(configFileProviderFileId: 'azure-config')
                    echo 'Exposing rest of variables...'
                    env.AZURE_ACR_NAME = "${env.AZURE_REGISTRY_ADDRESS}".split('\\.').first()
                    sh '''
                    az login --service-principal \
                    --username $AZURE_SP_USR \
                    --password $AZURE_SP_PSW \
                    --tenant $AZURE_TENANT_ID
                    '''
                }
            }
        }
        stage('Initialize terraform') {
            steps {
                script {
                    // Terraform-specific env variables
                    env.ARM_CLIENT_ID = env.AZURE_SP_USR
                    env.ARM_CLIENT_SECRET = env.AZURE_SP_PSW
                    env.ARM_TENANT_ID = env.AZURE_TENANT_ID
                    env.ARM_SUBSCRIPTION_ID = env.AZURE_SUBSCRIPTION_ID
                    // Additional var required by module; passed here to avoid exposure via terraform command args
                    env.TF_VAR_provisioner_arm_client_secret = env.AZURE_SP_PSW
                    // Required by remote state: 
                    // https://learn.microsoft.com/en-us/azure/developer/terraform/store-state-in-azure-storage
                    env.ARM_ACCESS_KEY=sh(
                        script: '''
                        az storage account keys list \
                        --resource-group $AZURE_RESOURCE_GROUP_NAME \
                        --account-name $AZURE_STORAGE_ACCOUNT_NAME \
                        --query '[0].value' -o tsv
                        ''',
                        returnStdout: true
                    ).trim()
                    dir('infra/terraform') {
                        sh 'terraform init -input=false'
                    }
                }
            }
        }
        stage('Run format-check') {
            steps {
                dir('infra/terraform') {
                    echo 'Checking formatting...'
                    sh 'terraform fmt -check -recursive -diff'
                }
            }
        }
        stage('Run tests') {
            when { expression { params.RUN_TESTS } }
            steps {
                script {
                    dir('infra/terraform') {
                        def tflintHome = tool('tflint_default')
                        withEnv(["PATH+EXTRA=${tflintHome}"]) {
                            echo 'Running tflint'
                            sh 'tflint --init --config=${WORKSPACE}/.tflint.hcl'
                            sh '''
                            tflint --recursive \
                            --config=${WORKSPACE}/.tflint.hcl \
                            --format=junit |\
                            tee -a tflint-results.xml
                            '''
                            junit(
                                allowEmptyResults: true,
                                skipMarkingBuildUnstable: false,
                                skipPublishingChecks: true,
                                testResults: 'tflint-results.xml'
                            )
                        }
                        echo 'Running terratest'
                        echo 'TODO'
                    }
                }
            }
        }
        stage('Run checkov over terraform code') {
            when { expression { params.RUN_CHECKOV } }
            steps {
                sh 'pip3 install checkov'
                sh 'checkov --config-file ./checkov-terraform.yml'
                junit(
                    allowEmptyResults: true,
                    skipMarkingBuildUnstable: false,
                    skipPublishingChecks: true,
                    testResults: 'checkov-results*.xml'
                )
            }
        }
        stage('Run terraform') {
            when {
                anyOf {
                    expression { params.DEPLOY_ACR }
                    expression { params.DEPLOY_AKS }
                    expression { params.TF_ACTION == 'destroy' }
                    expression { params.TF_ACTION == 'plan -destroy' }
                }
            }
            steps {
                script {
                    dir('infra/terraform') {
                        sh 'terraform validate'
                        /*
                        env.PARAM_NAME can be used instead of params.PARAM_NAME;
                        it's basically the same object
                        */ 
                        if (env.TF_ACTION == 'apply') {
                            sh '''
                            terraform plan -out=tfplan -input=false \
                            -var existing_rg=$AZURE_RESOURCE_GROUP_NAME \
                            -var provision_acr=$DEPLOY_ACR \
                            -var acr_name=$AZURE_ACR_NAME  \
                            -var acr_custom_region=$AZURE_REGION \
                            -var provision_aks=$DEPLOY_AKS \
                            -var aks_name=$AZURE_AKS_NAME \
                            -var aks_custom_region=$AZURE_REGION \
                            -var aks_resources_rg_name=$AZURE_AKS_RESOURCES_RG_NAME \
                            -var aks_node_count=$AZURE_AKS_NODE_COUNT \
                            -var aks_node_sku=$AZURE_AKS_NODE_SKU \
                            -var contapp_env_name=$AZURE_CONTAPP_ENV_NAME \
                            -var az_cli_path="/opt/tools/python/install/bin/az"
                            terraform $TF_ACTION -input=false -auto-approve tfplan
                            '''
                        } else if (env.TF_ACTION == 'destroy') {
                            sh '''
                            terraform plan -destroy -out=tfplan -input=false \
                            -var existing_rg=$AZURE_RESOURCE_GROUP_NAME \
                            -var provision_acr=$DEPLOY_ACR \
                            -var acr_name=$AZURE_ACR_NAME  \
                            -var acr_custom_region=$AZURE_REGION \
                            -var provision_aks=$DEPLOY_AKS \
                            -var aks_name=$AZURE_AKS_NAME \
                            -var aks_custom_region=$AZURE_REGION \
                            -var aks_resources_rg_name=$AZURE_AKS_RESOURCES_RG_NAME \
                            -var aks_node_count=$AZURE_AKS_NODE_COUNT \
                            -var aks_node_sku=$AZURE_AKS_NODE_SKU \
                            -var contapp_env_name=$AZURE_CONTAPP_ENV_NAME \
                            -var az_cli_path="/opt/tools/python/install/bin/az"
                            terraform apply -input=false -auto-approve tfplan
                            '''
                        } else {
                            sh '''
                            terraform $TF_ACTION -input=false \
                            -var existing_rg=$AZURE_RESOURCE_GROUP_NAME \
                            -var provision_acr=$DEPLOY_ACR \
                            -var acr_name=$AZURE_ACR_NAME  \
                            -var acr_custom_region=$AZURE_REGION \
                            -var provision_aks=$DEPLOY_AKS \
                            -var aks_name=$AZURE_AKS_NAME \
                            -var aks_custom_region=$AZURE_REGION \
                            -var aks_resources_rg_name=$AZURE_AKS_RESOURCES_RG_NAME \
                            -var aks_node_count=$AZURE_AKS_NODE_COUNT \
                            -var aks_node_sku=$AZURE_AKS_NODE_SKU \
                            -var contapp_env_name=$AZURE_CONTAPP_ENV_NAME \
                            -var az_cli_path="/opt/tools/python/install/bin/az"
                            '''
                        }
                    }
                }
            }
        }
        stage('Deploy k8s resources') {
            when {
                expression { params.DEPLOY_K8S_RESOURCES }
            }
            steps {
                script {
                    sh '''
                    az aks get-credentials --resource-group $AZURE_RESOURCE_GROUP_NAME \
                    --name $AZURE_AKS_NAME --admin
                    '''
                    dir('infra/kubernetes') {
                        // // Uncomment for bare-metal k8s
                        // ['dev-env', 'uat-env', 'prod-env'].each {
                        //     sh """
                        //     kubectl create secret docker-registry acr-registry-secret-${it} \
                        //     --namespace ${it} \
                        //     --docker-server=$AZURE_REGISTRY_ADDRESS \
                        //     --docker-username=$AZURE_SP_USR \
                        //     --docker-password=$AZURE_SP_PSW \
                        //     --dry-run=client -o yaml > acr-registry-secret-${it}.yaml
                        //     """
                        // }
                        sh 'chmod +x ./provision-k8s-resources.sh'
                        // TODO: get LB IP from terraform as raw output
                        sh './provision-k8s-resources.sh | tee -a script.log'
                        loadBalancerIp = readFile(file: 'script.log') =~ /(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/
                        env.LOAD_BALANCER_IP = "${loadBalancerIp[0][0]}"
                    }
                    dir('infra/misc') {
                        withCredentials(
                            [file(credentialsId: 'ovh-api-credentials', variable: 'API_CREDS')]
                        ) {
                            sh '''
                            cp $API_CREDS ovh.conf
                            pip install -r requirements.txt
                            python3 ovh_script.py -z $OVH_ZONE -s aks -r A -t $LOAD_BALANCER_IP
                            python3 ovh_script.py -z $OVH_ZONE -s *.aks -r A -t $LOAD_BALANCER_IP
                            rm ovh.conf
                            rm $API_CREDS
                            '''
                        }
                    }
                }
            }
        }
    }
    post {
        cleanup {
            cleanWs()
        }
    }
}
