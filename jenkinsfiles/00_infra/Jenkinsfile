pipeline {
    agent {
        label 'azure-docker'
    }
    options {
        buildDiscarder(
            logRotator(numToKeepStr: '5')
        )
        timestamps()
        disableConcurrentBuilds()
        timeout(
            time: 1,
            unit: 'HOURS'
        )
        durabilityHint('PERFORMANCE_OPTIMIZED')
        ansiColor('xterm')
    }
    environment {
        PATH = "$PATH:$HOME/.local/bin"
        AZURE_SP = credentials('azure-aks-testcluster-service-principal')
    }
    parameters {
        booleanParam(
            name: 'DEPLOY_ACR',
            defaultValue: false,
            description: 'Do you want to deploy Azure Container Registry?'
        )
        booleanParam(
            name: 'DEPLOY_AKS',
            defaultValue: false,
            description: 'Do you want to deploy Azure Kubernetes Service?'
        )
        booleanParam(
            name: 'DEPLOY_K8S_RESOURCES',
            defaultValue: false,
            description: 'Do you want to deploy Kubernetes resources?'
        )
        booleanParam(
            name: 'REFRESH_DNS',
            defaultValue: false,
            description: 'Do you want to refresh DNS records?'
        )
        booleanParam(
            name: 'RUN_CHECKS',
            defaultValue: true,
            description: 'Do you want to run tests and checks?'
        )
        choice(
            choices: ['plan', 'apply', 'destroy -plan', 'destroy'],
            description: 'Select terraform action',
            name: 'TF_ACTION'
        )
    }
    stages {
        stage('Prepare variables') {
            steps {
                script {
                    dbCredentialsId = 'flask-api-pizzaapp-database-dev-env'
                    echo "Git repo url: ${env.GIT_URL}"
                    echo "Git branch: ${env.GIT_BRANCH}"
                    echo 'Exposing Azure-specific env variables...'
                    configFileProvider([
                        configFile(
                            fileId: 'azure-config',
                            variable: 'AZURE_CONFIGURATION'
                        )
                    ]) {
                        // Split by each line, then split by '=' and remove quotes
                        azureVariables = readFile("${env.AZURE_CONFIGURATION}").split('\n').collect { azVar ->
                            azVar.split('=').last().replaceAll("^\"|^\'|\'\$|\"\$", "")
                        }
                        env.AZURE_SUBSCRIPTION_ID = azureVariables[0]
                        env.AZURE_TENANT = azureVariables[1]
                        env.AZURE_TENANT_ID = azureVariables[2]
                        env.AZURE_KUBE_CLUSTER_NAME = azureVariables[3]
                        env.AZURE_REGISTRY_ADDRESS = azureVariables[4]
                        env.AZURE_RESOURCE_GROUP_NAME = azureVariables[5]
                        env.AZURE_INGRESS_DOMAIN = azureVariables[6]
                    }
                }
            }
        }
        stage('Run terraform') {
            steps {
                script {
                    env.ARM_CLIENT_ID = "00000000-0000-0000-0000-000000000000"
                    env.ARM_CLIENT_SECRET = env.AZURE_SP_PSW
                    env.ARM_TENANT_ID = env.AZURE_TENANT_ID
                    env.ARM_SUBSCRIPTION_ID = env.AZURE_SUBSCRIPTION_ID
                    dir('infra/terraform') {
                        sh '''
                        terraform $TF_ACTION
                        '''
                    }
                }
            }
        }
    }
}
