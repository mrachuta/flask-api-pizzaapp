pipeline {
    agent {
        // Use new pod template
        label 'azure'
    }
    options {
        buildDiscarder(
            logRotator(numToKeepStr: '5')
        )
        timestamps()
        disableConcurrentBuilds()
        timeout(
            time: 1,
            unit: 'HOURS'
        )
        durabilityHint('PERFORMANCE_OPTIMIZED')
        ansiColor('xterm')
    }
    environment {
        PATH = "$PATH:$HOME/.local/bin"
        AZURE_SP = credentials('azure-aks-testcluster-service-principal')
    }
    parameters {
        booleanParam(
            name: 'DEPLOY_ACR',
            defaultValue: false,
            description: 'Do you want to deploy Azure Container Registry?'
        )
        booleanParam(
            name: 'DEPLOY_AKS',
            defaultValue: false,
            description: 'Do you want to deploy Azure Kubernetes Service?'
        )
        booleanParam(
            name: 'DEPLOY_K8S_RESOURCES',
            defaultValue: false,
            description: 'Do you want to deploy Kubernetes resources?'
        )
        booleanParam(
            name: 'REFRESH_DNS',
            defaultValue: false,
            description: 'Do you want to refresh DNS records?'
        )
        booleanParam(
            name: 'RUN_CHECKS',
            defaultValue: true,
            description: 'Do you want to run tests and checks?'
        )
        choice(
            choices: ['plan', 'apply', 'destroy -plan', 'destroy'],
            description: 'Select terraform action',
            name: 'TF_ACTION'
        )
    }
    stages {
        stage('Prepare variables') {
            steps {
                script {
                    dbCredentialsId = 'flask-api-pizzaapp-database-dev-env'
                    echo "Git repo url: ${env.GIT_URL}"
                    echo "Git branch: ${env.GIT_BRANCH}"
                    echo 'Exposing Azure-specific env variables...'
                    configFileProvider([
                        configFile(
                            fileId: 'azure-config',
                            variable: 'AZURE_CONFIGURATION'
                        )
                    ]) {
                        // Split by each line, then split by '=' and remove quotes
                        azureVariables = readFile("${env.AZURE_CONFIGURATION}").split('\n').collect { azVar ->
                            azVar.split('=').last().replaceAll("^\"|^\'|\'\$|\"\$", "")
                        }
                        env.AZURE_SUBSCRIPTION_ID = azureVariables[0]
                        env.AZURE_TENANT = azureVariables[1]
                        env.AZURE_TENANT_ID = azureVariables[2]
                        env.AZURE_KUBE_CLUSTER_NAME = azureVariables[3]
                        env.AZURE_REGISTRY_ADDRESS = azureVariables[4]
                        env.AZURE_RESOURCE_GROUP_NAME = azureVariables[5]
                        env.AZURE_INGRESS_DOMAIN = azureVariables[6]
                        env.AZURE_RESOURCES_RG_NAME = azureVariables[7]
                        env.AZURE_STORAGE_ACCOUNT_NAME = azureVariables[8]
                    }
                }
            }
        }
        stage('Run terraform') {
            when {
                anyOf {
                    expression { env.DEPLOY_ACR == true }
                    expression { env.DEPLOY_AKS == true }
                }
            }
            steps {
                script {
                    // Terraform-specific env variables
                    env.ARM_CLIENT_ID = env.AZURE_SP_USR
                    env.ARM_CLIENT_SECRET = env.AZURE_SP_PSW
                    env.ARM_TENANT_ID = env.AZURE_TENANT_ID
                    env.ARM_SUBSCRIPTION_ID = env.AZURE_SUBSCRIPTION_ID
                    // Required by remote state: 
                    // https://learn.microsoft.com/en-us/azure/developer/terraform/store-state-in-azure-storage
                    env.ARM_ACCESS_KEY=sh(
                        script: '''
                        az storage account keys list \
                        --resource-group $AZURE_RESOURCE_GROUP_NAME \
                        --account-name $AZURE_STORAGE_ACCOUNT_NAME \
                        --query '[0].value' -o tsv
                        ''',
                        returnStdout: true
                    ).trim()
                    // Double slash to escape dot
                    env.AZURE_REGISTRY_NAME = "${env.AZURE_REGISTRY_ADDRESS}".split('\\.').first()
                    dir('infra/terraform') {
                        sh '''
                        terraform init
                        terraform $TF_ACTION \
                        -var existing_rg=$AZURE_RESOURCE_GROUP_NAME \
                        -var provision_acr=$DEPLOY_ACR \
                        -var provision_aks=$DEPLOY_ACR \
                        -var acr_name=$AZURE_REGISTRY_NAME  \
                        -var aks_name=$AZURE_KUBE_CLUSTER_NAME \
                        -var aks_resources_rg_name=$AZURE_RESOURCES_RG_NAME
                        '''
                    }
                }
            }
        }
        stage('Deploy k8s resources') {
            when {
                expression { env.DEPLOY_K8S_RESOURCES == true }
            }
            steps {
                script {
                    sh '''
                    az login --service-principal \
                    --username $AZURE_SP_USR \
                    --password $AZURE_SP_PSW \
                    --tenant $AZURE_TENANT
                    az aks get-credentials --resource-group $AZURE_RESOURCE_GROUP_NAME \
                    --name $AZURE_KUBE_CLUSTER_NAME --admin
                    '''
                    dir('infra/kubernetes') {
                        ['dev-env', 'uat-env', 'prod-env'].each {
                            sh """
                            kubectl create secret docker-registry acr-registry-secret-{it} \
                            --namespace {it} \
                            --docker-server=$AZURE_REGISTRY_ADDRESS \
                            --docker-username=$AZURE_REGISTRY_NAME  \
                            --docker-password=$AZURE_SP_PSW \
                            --dry-run=client -o yaml > acr-registry-secret-${it}.yaml
                            """
                        }
                        sh 'chmod +x provision-k8s-resources.sh'
                        sh './provision-k8s-resources.sh | tee -a script.log'
                        loadBalancerIp = readFile(file: 'script.log') =~ /("\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}")/
                        echo "loadBalancerIp: ${loadBalancerIp}"
                    }
                }
            }
        }
    }
}
