@Library('jenkins-shared-libs') _

pipeline {
    agent {
        label 'azure'
    }
    options {
        buildDiscarder(
            logRotator(numToKeepStr: '5')
        )
        timestamps()
        disableConcurrentBuilds()
        timeout(
            time: 1,
            unit: 'HOURS'
        )
        durabilityHint('PERFORMANCE_OPTIMIZED')
        ansiColor('xterm')
        skipDefaultCheckout()
    }
    environment {
        CRANE_HOME = tool(name: 'crane_default', type: 'com.cloudbees.jenkins.plugins.customtools.CustomTool')
        PATH = "$PATH:$HOME/.local/bin:$CRANE_HOME"
        APP_NAME = 'flask-api-pizzaapp'
        TARGET_ENV = 'uat-env'
        AZURE_SP = credentials('azure-sp')
    }
    stages {
        stage('Prepare variables') {
            steps {
                script {
                    // Set by default that release meets the requirements
                    releaseReqMeet = true
                    // Set by default that it's not a conditional release
                    conditionalRelease = false
                    env.GIT_BRANCH = scm.branches[0].name
                    env.GIT_URL = scm.userRemoteConfigs[0].url
                    dbCredentialsId = 'flask-api-pizzaapp-database-uat-env'
                    echo "Git repo url: ${env.GIT_URL}"
                    echo "Git branch: ${env.GIT_BRANCH}"
                    if (
                        currentBuild.getBuildCauses().toString().contains('BranchIndexingCause') || 
                        currentBuild.getBuildCauses().toString().contains('Branch event')
                    ) {
                        currentBuild.result = 'ABORTED'
                        error('Build aborted because of an external trigger!')
                    }
                    if (!(env.GIT_BRANCH == 'development')) {
                        error('You can use this pipeline only from development branch!')
                    }
                    // Exposing multiple variables like AZURE_SUBSCRIPTION_ID etc.
                    exposeVariablesFromConfigFile(configFileProviderFileId: 'azure-config')
                    echo 'Exposing other variables...'
                    env.INGRESS_HOST = "${env.APP_NAME}-${env.TARGET_ENV}.${env.AZURE_INGRESS_DOMAIN}"
                    sh '''
                    az login --service-principal \
                    --username $AZURE_SP_USR \
                    --password $AZURE_SP_PSW \
                    --tenant $AZURE_TENANT_ID
                    '''
                }
            }
        }
        stage('Select image to release') {
            steps {
                script {
                    try {
                        imageFilter = '| grep \'^development-[0-9]\\+$\''
                        imageTags = sh(
                            returnStdout: true,
                            script: """
                            az acr repository show-tags --name ${env.AZURE_ACR_ADDRESS} \
                            --repository ${env.APP_NAME} --orderby time_desc --output tsv ${imageFilter}
                            """
                        ).trim()
                    } catch(Exception e) {
                        error(
                            "Are you sure that repository contains images matching following filter: ${imageFilter}"
                        )
                    }
                    timeout(time: 5, unit: 'MINUTES') {
                        env.SELECTED_TAG = input(
                            message: 'Select image to create release',
                            parameters: [
                                choice(
                                    name: 'Image tag to be used to create release',
                                    choices: imageTags,
                                    description: 'Select image that will be used to create release version.' +
                                    '\nOnly builds from development branch are allowed'
                                )
                            ]
                        )
                    }
                    echo "Image tag selected to create release: ${env.SELECTED_TAG}"
                    sh '''
                    set +x
                    echo $AZURE_SP_PSW > azcr.psw
                    set -x
                    cat azcr.psw | crane auth login $AZURE_ACR_ADDRESS \
                    --username $AZURE_SP_USR --password-stdin
                    rm azcr.psw
                    '''
                    imageDataJson = readJSON(
                        text: sh(
                            script: 'crane config ${AZURE_ACR_ADDRESS}/${APP_NAME}:${SELECTED_TAG}',
                            returnStdout: true
                        ).trim(),
                        returnPojo: true
                    )
                }
            }
        }
        stage('Define version') {
            steps {
                script {
                    env.IMAGE_COMMIT_ID = imageDataJson.config.Labels.COMMIT_ID
                    def labelsMap = [
                        "LEAKED_SECRETS_CHECK": null,
                        "DEPENDENCY_SECURITY_CHECK": null,
                        "SONAR_QG_STATUS": null,
                    ]
                    // Check if each image tag value equals "OK"
                    for (i in labelsMap) {
                        echo "Verify if image meets the condition ${i.key}..."
                        conditionResult = imageDataJson.config.Labels.(i.key)
                        if (conditionResult == 'OK') {
                            echo "--> ${i.key} PASSED!"
                            releaseReqMeet = true
                        } else {
                            echo "Condition ${i.key} is not meet: ${conditionResult}"
                            // Conditional acceptance of release required
                            // because one of conditions is not meet
                            releaseReqMeet = false
                            conditionalRelease = true
                        }
                        // Update map entry
                        labelsMap."${i.key}" = "${conditionResult}"
                    }
                    if (conditionalRelease) {
                        operatorInput = input(
                            message: 'Release conditions issue',
                            parameters: [
                                booleanParam(
                                    name: 'conditionalAcceptance',
                                    defaultValue: false,
                                    description: 'One or more of release conditions are not meet.\n\n' +
                                    "${labelsMap}\n\n" +
                                    'Do you want to proceed with conditional release?'
                                )
                            ],
                            submitterParameter: 'acceptedBy'
                        )
                        releaseReqMeet = operatorInput.conditionalAcceptance
                        // Expose as env variable for better integration with shell
                        env.ACCEPTED_BY = operatorInput.acceptedBy
                    }
                    if (!releaseReqMeet) {
                        error('Release requirements are not meet, aborting release!')
                    } else if (conditionalRelease && releaseReqMeet) {
                        unstable('Not all release conditions are meet; proceding with conditional release; ' +
                        "accepted by ${env.ACCEPTED_BY}; marking build as unstable!")
                    } else {
                        echo "All conditions are meet!"
                    }
                    echo "Following commit will be selected to create tag: ${env.IMAGE_COMMIT_ID}"
                    // Perform checkout including tags
                    checkout([
                        $class: 'GitSCM',
                        branches: [
                            [name: env.GIT_BRANCH]
                        ],
                        extensions: [
                            [
                                $class: 'CloneOption',
                                honorRefspec: true,
                                noTags: false,
                                shallow: false
                            ]
                        ],
                        userRemoteConfigs: [
                            [
                                credentialsId: scm.userRemoteConfigs[0].credentialsId,
                                url: env.GIT_URL
                            ]
                        ]
                    ])
                    def gitRepoTags = sh(
                        returnStdout: true,
                        script: 'git tag --sort=-v:refname'
                    ).split()
                    if (!gitRepoTags) {
                        echo "No tags found in repo ${env.GIT_URL} in branch ${env.GIT_BRANCH}"
                        nextMajorVersion = '1.0.0'
                        nextMinorVersion = 'N/A'
                        nextPatchVersion = 'N/A'
                        echo "Creating automatically initial version: ${nextMajorVersion}"
                    } else {
                        echo "Following tags were found in repo ${env.GIT_URL} in branch ${env.GIT_BRANCH}:"
                        echo "${gitRepoTags}"
                        def lastVersion = gitRepoTags.first()
                        echo "Last version: ${lastVersion}"
                        def (major, minor, patch) = lastVersion.tokenize('.').collect { it.toInteger() }
                        nextMajorVersion = "${major + 1}.0.0"
                        nextMinorVersion = "${major}.${minor + 1}.0"
                        nextPatchVersion = "${major}.${minor}.${patch + 1}"
                    }
                    timeout(time: 5, unit: 'MINUTES') {
                        env.NEW_RELEASE_TAG = input(
                            message: 'Provide new tag to be created',
                            parameters: [
                                string(
                                    name: 'New tag to be created',
                                    defaultValue: 'Put version here',
                                    description: 'Possible versions:\n\n' +
                                    "Major: ${nextMajorVersion}\n" +
                                    "Minor: ${nextMinorVersion}\n" +
                                    "Patch: ${nextPatchVersion}",
                                    trim: true
                                )
                            ]
                        )
                    }
                    if (!(env.NEW_RELEASE_TAG =~ '[0-9]+\\.[0-9]+\\.[0-9]+')) {
                        error('Invalid tag, it should have format X.X.X!')
                    }
                    if (gitRepoTags.contains(env.NEW_RELEASE_TAG)) {
                        error("Tag ${env.NEW_RELEASE_TAG} already exists!")
                    }
                    echo 'Creating git tag locally...'
                    sh '''
                    git config --global user.email "jenkins-bot@thinkbox.pl"
                    git config --global user.name "Jenkins Bot"
                    git tag -a ${NEW_RELEASE_TAG} ${IMAGE_COMMIT_ID} -m "Version ${NEW_RELEASE_TAG}"
                    '''
                }
            }
        }
        stage('Release version') {
            steps {
                script {
                    withCredentials([
                        usernamePassword(
                            credentialsId: scm.userRemoteConfigs[0].credentialsId,
                            passwordVariable: 'GIT_PASSWORD',
                            usernameVariable: 'GIT_USERNAME'
                        )
                    ]) {
                        try {
                            echo 'Pushing git tag to repository...'
                            sh 'git push https://${GIT_USERNAME}:${GIT_PASSWORD}@${GIT_URL#https://} --tags'
                            echo 'Tagging docker image...'
                            sh '''
                            crane tag ${AZURE_ACR_ADDRESS}/${APP_NAME}:${SELECTED_TAG} ${NEW_RELEASE_TAG}
                            '''                    
                            if (conditionalRelease && releaseReqMeet) {
                                // Took from SO: https://stackoverflow.com/a/54598281
                                echo 'Modify image to add new labels because of conditional release'
                                sh '''
                                crane mutate ${AZURE_ACR_ADDRESS}/${APP_NAME}:${NEW_RELEASE_TAG} \
                                --label CONDITIONAL_RELEASE="true" \
                                --label CONDITIONAL_REL_ACCEPTED_BY=${ACCEPTED_BY} 
                                '''
                            }
                        } catch(err) {
                            echo "Following error occured: ${err}"
                            echo 'Reverting changes...'
                            sh 'az acr repository delete --yes --name ${AZURE_ACR_ADDRESS} --image ${APP_NAME}:${NEW_RELEASE_TAG} || true'
                            sh 'git push --delete https://${GIT_USERNAME}:${GIT_PASSWORD}@${GIT_URL#https://} ${NEW_RELEASE_TAG} || true'
                            error('Failed to promote image!')
                        }
                    }
                }
            }
        }
        stage('Deploy to target environment') {
            steps {
                script {
                    echo "Checking out to following tag: ${env.NEW_RELEASE_TAG}"
                    checkout([
                        $class: 'GitSCM',
                        branches: [
                            [name: env.NEW_RELEASE_TAG]
                        ],
                        extensions: [
                            [
                                $class: 'CloneOption',
                                honorRefspec: true,
                                noTags: false,
                                shallow: false
                            ]
                        ],
                        userRemoteConfigs: [
                            [
                                credentialsId: scm.userRemoteConfigs[0].credentialsId,
                                url: env.GIT_URL
                            ]
                        ]
                    ])
                    echo "Deploying to ${env.TARGET_ENV}"
                    withCredentials([
                        usernamePassword(
                            credentialsId: dbCredentialsId,
                            passwordVariable: 'DATABASE_CRED_PSW',
                            usernameVariable: 'DATABASE_CRED_USR'
                        )
                    ]) {
                        sh '''
                        az aks get-credentials --resource-group $AZURE_RESOURCE_GROUP_NAME \
                        --name $AZURE_AKS_NAME --admin
                        helm upgrade --install $APP_NAME ./helm/$APP_NAME \
                        --wait \
                        --timeout 10m \
                        --atomic \
                        --namespace "$TARGET_ENV" \
                        --values ./helm/environments/${TARGET_ENV}.yaml \
                        --set image.repository="${AZURE_ACR_ADDRESS}/${APP_NAME}" \
                        --set image.tag="${NEW_RELEASE_TAG}" \
                        --set ingress.host="${INGRESS_HOST}" \
                        --set env.secrets.FLASK_DB_USER="${DATABASE_CRED_USR}" \
                        --set env.secrets.FLASK_DB_PASS="${DATABASE_CRED_PSW}"
                        '''
                    }
                }
            }
        }
    }
    post {
        cleanup {
            cleanWs()
        }
    }
}
