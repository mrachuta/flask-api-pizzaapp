pipeline {
    agent {
        label 'python'
    }
    options {
        buildDiscarder(
            logRotator(numToKeepStr: '5')
        )
        timestamps()
        disableConcurrentBuilds()
        timeout(
            time: 1,
            unit: 'HOURS'
        )
        durabilityHint('PERFORMANCE_OPTIMIZED')
        ansiColor('xterm')
    }
    environment {
        PATH = "$PATH:$HOME/.local/bin"
        APP_NAME = 'flask-api-pizzaapp'
        TARGET_ENV = 'uat-env'
        DATABASE_CRED = credentials('flask-api-pizzaapp-database-uat-env')
        AZURE_PRINCIPAL = credentials('azure-aks-testcluster-service-principal')
        DOCKER_REGISTRY_USR = '00000000-0000-0000-0000-000000000000'
    }
    stages {
        stage('Prepare variables') {
            steps {
                script {
                    echo 'Exposing Azure-specific env variables...'
                    configFileProvider([
                        configFile(
                            fileId: 'azure-config',
                            variable: 'AZURE_CONFIGURATION'
                        )
                    ]) {
                        // Split by each line, then split by '=' and remove quotes
                        azureVariables = readFile("${env.AZURE_CONFIGURATION}").split('\n').collect { azVar ->
                            azVar.split('=').last().replaceAll("^\"|^\'|\'\$|\"\$", "")
                        }
                        env.AZURE_SUBSCRIPTION_ID = azureVariables[0]
                        env.AZURE_TENNANT = azureVariables[1]
                        env.AZURE_TENNANT_ID = azureVariables[2]
                        env.AZURE_KUBE_CLUSTER_NAME = azureVariables[3]
                        env.AZURE_REGISTRY_ADDRESS = azureVariables[4]
                        env.AZURE_RESOURCE_GROUP_NAME = azureVariables[5]
                    }
                }
            }
        }
        stage('Select image to release') {
            steps {
                script {
                    sh '''
                    az login --service-principal \
                    --username $AZURE_PRINCIPAL_USR \
                    --password $AZURE_PRINCIPAL_PSW \
                    --tenant $AZURE_TENNANT
                    '''
                    def imageTags = sh(
                        returnStdout: true,
                        script: 'az acr repository show-tags --name devjtacr01 \
                        --repository flask-api-pizzaapp --orderby time_desc --output tsv | grep development'
                    ).trim()
                    env.SELECTED_TAG = input(
                        message: 'Select image to create release',
                        parameters: [
                            choice(
                                name: 'Image tag to be used to create release',
                                choices: imageTags,
                                description: 'Select image that will be used to create release version.' +
                                'Only builds from development branch are allowed'
                            )
                        ]
                    )
                    echo "Image tag selected to create release: ${env.SELECTED_TAG}"
                    sh '''
                    REGISTRY_TOKEN=$(az acr login --name $AZURE_REGISTRY_ADDRESS --expose-token \
                    --output tsv --query accessToken)
                    docker login $AZURE_REGISTRY_ADDRESS --username $DOCKER_REGISTRY_USR --password-stdin < $REGISTRY_TOKEN
                    docker pull ${AZURE_REGISTRY_ADDRESS}/${APP_NAME}:${SELECTED_TAG}
                    '''
                }
            }
        }
        stage('Create new tag') {
            steps {
                sh 'echo TODO'
            }
        }
        stage('Promote') {
            steps {
                sh 'echo TODO'
            }
        }
        stage('Deploy to target environment') {
            steps {
                script {
                    echo "Deploying to ${env.TARGET_ENV}"
                    sh '''
                    az aks get-credentials --resource-group $AZURE_RESOURCE_GROUP_NAME \
                    --name $AZURE_KUBE_CLUSTER_NAME --admin
                    helm upgrade --install $APP_NAME ./helm/$APP_NAME \
                    --wait \
                    --timeout 10m \
                    --atomic \
                    --namespace "$TARGET_ENV" \
                    --values ./helm/environments/${TARGET_ENV}.yaml \
                    --set image.repository="${AZURE_REGISTRY_ADDRESS}/${APP_NAME}" \
                    --set image.tag="${TAG_NAME}" \
                    --set env.secrets.FLASK_DB_USER="${DATABASE_CRED_USR}" \
                    --set env.secrets.FLASK_DB_PASS="${DATABASE_CRED_PSW}"
                    '''
                }
            }
        }
    }
    post {
        cleanup {
            cleanWs()
        }
    }
}
