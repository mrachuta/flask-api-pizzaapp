@Library('jenkins-shared-libs') _

def allowedUsers = [
    'mrachuta',
    'tdeveloper'
]

pipeline {
    agent {
        label 'azure'
    }
    options {
        buildDiscarder(
            logRotator(numToKeepStr: '5')
        )
        timestamps()
        disableConcurrentBuilds()
        timeout(
            time: 1,
            unit: 'HOURS'
        )
        durabilityHint('PERFORMANCE_OPTIMIZED')
        ansiColor('xterm')
    }
    environment {
        CRANE_HOME = tool(name: 'crane_default', type: 'com.cloudbees.jenkins.plugins.customtools.CustomTool')
        PATH = "$PATH:$HOME/.local/bin:$CRANE_HOME"
        APP_NAME = 'flask-api-pizzaapp'
        TARGET_ENV = 'prod-env'
        AZURE_SP = credentials('azure-aks-testcluster-service-principal')
        AZURE_REGISTRY_USR = '00000000-0000-0000-0000-000000000000'
    }
    stages {
        stage('Prepare variables') {
            steps {
                script {
                    def triggerUser= currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause').userId[0]
                    env.GIT_BRANCH = scm.branches[0].name
                    env.GIT_URL = scm.userRemoteConfigs[0].url
                    dbCredentialsId = 'flask-api-pizzaapp-database-prod-env'
                    echo "Triggered by: ${triggerUser}"
                    echo "Git repo url: ${env.GIT_URL}"
                    echo "Git branch: ${env.GIT_BRANCH}"
                    if (
                        currentBuild.getBuildCauses().toString().contains('BranchIndexingCause') || 
                        currentBuild.getBuildCauses().toString().contains('Branch event')
                    ) {
                        currentBuild.result = 'ABORTED'
                        error('Build aborted because of an external trigger!')
                    }
                    if (!(allowedUsers.contains(triggerUser))) {
                        error("You are not allowed to deploy to ${env.TARGET_ENV}!")
                    }
                    // Allow to run pipeline only from master branch
                    if (env.GIT_BRANCH != 'master') {
                        error('You can use this pipeline only from master branch!')
                    }
                    exposeVariablesFromConfigFile(configFileProviderFileId: 'azure-config')
                    echo 'Exposing other variables...'
                    env.INGRESS_HOST = "${env.APP_NAME}-${env.TARGET_ENV}.${env.AZURE_INGRESS_DOMAIN}"
                    sh '''
                    az login --service-principal \
                    --username $AZURE_SP_USR \
                    --password $AZURE_SP_PSW \
                    --tenant $AZURE_TENANT
                    '''
                    env.AZURE_REGISTRY_TOKEN = sh(
                        script: '''
                        set +x
                        az acr login --name $AZURE_REGISTRY_ADDRESS \
                        --expose-token --output tsv --query accessToken
                        ''',
                        returnStdout: true
                    ).trim()
                }
            }
        }
        stage('Get Docker image') {
            steps {
                script {
                    try {
                        imageFilter = "| grep '[0-9]\\+.[0-9]\\+.[0-9]\\+'"
                        imageTags = sh(
                            returnStdout: true,
                            script: '''
                            az acr repository show-tags --name ${AZURE_REGISTRY_ADDRESS} \
                            --repository ${APP_NAME} --orderby time_desc --output tsv ${imageFilter}
                            '''
                        ).trim()
                    } catch(Exception e) {
                        error(
                            "Are you sure that repository contains images matching following filter: ${imageFilter}"
                        )
                    }
                    timeout(time: 5, unit: 'MINUTES') {
                        env.SELECTED_TAG = input(
                            message: 'Select image to deploy',
                            parameters: [
                                choice(
                                    name: "Image tag to be used to deploy to ${env.TARGET_ENV}",
                                    choices: imageTags,
                                    description: "Select release that will be deployed to ${env.TARGET_ENV}"
                                )
                            ]
                        )
                    }
                    echo "Image tag selected to deploy: ${env.SELECTED_TAG}"
                    sh '''
                    set +x
                    echo $AZURE_REGISTRY_TOKEN > azcr.token
                    set -x
                    cat azcr.token | crane auth login $AZURE_REGISTRY_ADDRESS \
                    --username $AZURE_REGISTRY_USR --password-stdin
                    '''
                }
            }
        }
        stage('Deploy to target environment') {
            steps {
                script {
                    echo "Verifying if release is conditional..."
                    imageDataJson = readJSON(
                        text: sh(
                            script: 'crane config ${AZURE_REGISTRY_ADDRESS}/${APP_NAME}:${SELECTED_TAG}',
                            returnStdout: true
                        ).trim(),
                        returnPojo: true
                    )
                    if ((imageDataJson.config.Labels.CONDITIONAL_RELEASE).toBoolean()) {
                        echo "Image contains CONDITIONAL_RELEASE flag, requesting user input..."
                        def labelsMap = [
                            "CONDITIONAL_REL_ACCEPTED_BY": null,
                            "LEAKED_SECRETS_CHECK": null,
                            "DEPENDENCY_SECURITY_CHECK": null,
                            "SONAR_QG_STATUS": null
                        ]
                        for (i in labelsMap) {
                            conditionResult = imageDataJson.config.Labels.(i.key)
                            labelsMap."${i.key}" = "${conditionResult}"
                        }
                        operatorInput = input(
                            message: 'CONDITIONAL_RELEASE flag on image',
                            parameters: [
                                booleanParam(
                                    name: 'conditionalAcceptance',
                                    defaultValue: false,
                                    description: 'This image contains CONDITIONAL_RELEASE flag set to true.\n' +
                                    'Do you want to proceed with deployment of this image?\n' +
                                    'This image does not meet all requirements:\n\n' +
                                    "${labelsMap}"
                                )
                            ],
                            submitterParameter: 'acceptedBy'
                        )
                        if (!operatorInput.conditionalAcceptance) {
                            error('Release requirements are not meet, aborting release!')
                        } else {
                            unstable('Not all release conditions are meet; proceding with conditional release; ' +
                            "accepted by ${operatorInput.acceptedBy}")
                        }
                    }
                    echo "Checking out to following tag: ${env.SELECTED_TAG}"
                    checkout([
                        $class: 'GitSCM',
                        branches: [
                            [name: env.SELECTED_TAG]
                        ],
                        extensions: [
                            [
                                $class: 'CloneOption',
                                honorRefspec: true,
                                noTags: false,
                                shallow: false
                            ]
                        ],
                        userRemoteConfigs: [
                            [
                                credentialsId: scm.userRemoteConfigs[0].credentialsId,
                                url: env.GIT_URL
                            ]
                        ]
                    ])
                    echo "Checking out to following commit id ${env.RELEASE_COMMIT_ID} that was used to create image..."
                    sh 'git checkout $RELEASE_COMMIT_ID'     
                    echo "Deploying to ${env.TARGET_ENV}"
                    withCredentials([
                        usernamePassword(
                            credentialsId: dbCredentialsId,
                            passwordVariable: 'DATABASE_CRED_PSW',
                            usernameVariable: 'DATABASE_CRED_USR'
                        )
                    ]) {
                        sh '''
                        az aks get-credentials --resource-group $AZURE_RESOURCE_GROUP_NAME \
                        --name $AZURE_KUBE_CLUSTER_NAME --admin
                        helm upgrade --install $APP_NAME ./helm/$APP_NAME \
                        --wait \
                        --timeout 10m \
                        --atomic \
                        --namespace "$TARGET_ENV" \
                        --values ./helm/environments/${TARGET_ENV}.yaml \
                        --set image.repository="${AZURE_REGISTRY_ADDRESS}/${APP_NAME}" \
                        --set image.tag="${SELECTED_TAG}" \
                        --set ingress.host="${INGRESS_HOST}" \
                        --set env.secrets.FLASK_DB_USER="${DATABASE_CRED_USR}" \
                        --set env.secrets.FLASK_DB_PASS="${DATABASE_CRED_PSW}"
                        '''
                    }
                }
            }
        }
    }
    post {
        cleanup {
            cleanWs()
        }
    }
}
