pipeline {
    agent {
        label 'azure-docker'
    }
    options {
        buildDiscarder(
            logRotator(numToKeepStr: '5')
        )
        timestamps()
        disableConcurrentBuilds()
        timeout(
            time: 1,
            unit: 'HOURS'
        )
        durabilityHint('PERFORMANCE_OPTIMIZED')
        ansiColor('xterm')
    }
    environment {
        PATH = "$PATH:$HOME/.local/bin"
        APP_NAME = 'flask-api-pizzaapp'
        AZURE_SP = credentials('azure-aks-testcluster-service-principal')
        AZURE_REGISTRY_USR = '00000000-0000-0000-0000-000000000000'
    }
    parameters {
        choice(
            choices: ['none', 'dev-env', 'uat-env'],
            description: 'Select target environment',
            name: 'TARGET_ENV'
        )
    }
    stages {
        stage('Prepare variables') {
            steps {
                script {
                    env.GIT_BRANCH = scm.branches[0].name
                    env.GIT_URL = scm.userRemoteConfigs[0].url
                    env.TARGET_ENV = params.TARGET_ENV
                    echo "Git repo url: ${env.GIT_URL}"
                    echo "Git branch: ${env.GIT_BRANCH}"
                    echo "Selected environment: ${env.TARGET_ENV}"
                    if (
                        currentBuild.getBuildCauses().toString().contains('BranchIndexingCause') || 
                        currentBuild.getBuildCauses().toString().contains('Branch event')
                    ) {
                        currentBuild.result = 'ABORTED'
                        error('Build aborted because of an external trigger!')
                    }
                    if (!(env.GIT_BRANCH == 'development')) {
                        error('You can use this pipeline only from development branch!')
                    }
                    switch (env.TARGET_ENV) {
                        case 'dev-env':
                            dbCredentialsId = 'flask-api-pizzaapp-database-dev-env'
                            imageFilter = ''
                            break;
                        case 'uat-env':
                            dbCredentialsId = 'flask-api-pizzaapp-database-uat-env'
                            imageFilter = " | grep '[0-9]\\+.[0-9]\\+.[0-9]\\+'"
                            break;
                        default:
                            error('Unknow environment!')
                            break;
                    }
                    echo 'Exposing Azure-specific env variables...'
                    configFileProvider([
                        configFile(
                            fileId: 'azure-config',
                            variable: 'AZURE_CONFIGURATION'
                        )
                    ]) {
                        // Split by each line, then split by '=' and remove quotes
                        azureVariables = readFile("${env.AZURE_CONFIGURATION}").split('\n').collect { azVar ->
                            azVar.split('=').last().replaceAll("^\"|^\'|\'\$|\"\$", "")
                        }
                        env.AZURE_SUBSCRIPTION_ID = azureVariables[0]
                        env.AZURE_TENANT = azureVariables[1]
                        env.AZURE_TENANT_ID = azureVariables[2]
                        env.AZURE_KUBE_CLUSTER_NAME = azureVariables[3]
                        env.AZURE_REGISTRY_ADDRESS = azureVariables[4]
                        env.AZURE_RESOURCE_GROUP_NAME = azureVariables[5]
                        env.AZURE_INGRESS_DOMAIN = azureVariables[6]
                        env.INGRESS_HOST = "${env.APP_NAME}-${env.TARGET_ENV}.${env.AZURE_INGRESS_DOMAIN}"
                    }
                    echo 'Exposing other variables...'
                    env.INGRESS_HOST = "${env.APP_NAME}-${env.TARGET_ENV}.${env.AZURE_INGRESS_DOMAIN}"
                }
            }
        }
        stage('Get Docker image') {
            steps {
                script {
                    sh '''
                    az login --service-principal \
                    --username $AZURE_SP_USR \
                    --password $AZURE_SP_PSW \
                    --tenant $AZURE_TENANT
                    '''
                    def imageTags = sh(
                        returnStdout: true,
                        script: """
                        az acr repository show-tags --name ${env.AZURE_REGISTRY_ADDRESS} \
                        --repository ${env.APP_NAME} --orderby time_desc --output tsv ${imageFilter}
                        """
                    ).trim()
                    timeout(time: 5, unit: 'MINUTES') {
                        env.SELECTED_TAG = input(
                            message: 'Select image to deploy',
                            parameters: [
                                choice(
                                    name: "Image tag to be used to deploy to ${env.TARGET_ENV}",
                                    choices: imageTags,
                                    description: "Select release that will be deployed to ${env.TARGET_ENV}"
                                )
                            ]
                        )
                    }
                    echo "Image tag selected to deploy: ${env.SELECTED_TAG}"
                }
                // TODO: Add option to verify if commit is part of development branch
                // if uat-env is used
            }
        }
        stage('Deploy to target environment') {
            steps {
                script {
                    echo "Verifying if release is conditional..."
                    imageConditionalRelease = sh(
                        returnStdout: true,
                        script: '''
                        docker inspect --format '{{ index .Config.Labels "CONDITIONAL_RELEASE" }}' \
                        ${AZURE_REGISTRY_ADDRESS}/${APP_NAME}:${SELECTED_TAG}
                        '''
                    ).trim()
                    if (imageConditionalRelease.toBoolean()) {
                        echo "Image contains CONDITIONAL_RELEASE flag, requesting user input..."
                        def tagMap = [
                            "CONDITIONAL_REL_ACCEPTED_BY": null,
                            "LEAKED_SECRETS_CHECK": null,
                            "DEPENDENCY_SECURITY_CHECK": null,
                            "SONAR_QG_STATUS": null
                        ]
                        for (i in tagMap) {
                            conditionResult = sh(
                                returnStdout: true,
                                script: """
                                docker inspect --format "{{ index .Config.Labels "'"${i.key}"'" }}" \
                                ${AZURE_REGISTRY_ADDRESS}/${APP_NAME}:${SELECTED_TAG}
                                """
                            ).trim()
                            tagMap."${i.key}" = "${conditionResult}"
                        }
                        operatorInput = input(
                            message: 'CONDITIONAL_RELEASE flag on image',
                            parameters: [
                                booleanParam(
                                    name: 'conditionalAcceptance',
                                    defaultValue: false,
                                    description: 'This image contains CONDITIONAL_RELEASE flag set to true.\n' +
                                    'Do you want to proceed with deployment of this image?\n' +
                                    'This image does not meet all requirements:\n\n' +
                                    "${tagMap}"
                                )
                            ],
                            submitterParameter: 'acceptedBy'
                        )
                        if (!operatorInput.conditionalAcceptance) {
                            error('Release requirements are not meet, aborting release!')
                        } else {
                            unstable('Not all release conditions are meet; proceding with conditional release; ' +
                            "accepted by ${operatorInput.acceptedBy}; marking build as unstable!")
                        }
                    }                                      
                    echo "Deploying to ${env.TARGET_ENV}"
                    withCredentials([
                        usernamePassword(
                            credentialsId: dbCredentialsId,
                            passwordVariable: 'DATABASE_CRED_PSW',
                            usernameVariable: 'DATABASE_CRED_USR'
                        )
                    ]) {
                        sh '''
                        az aks get-credentials --resource-group $AZURE_RESOURCE_GROUP_NAME \
                        --name $AZURE_KUBE_CLUSTER_NAME --admin
                        helm upgrade --install $APP_NAME ./helm/$APP_NAME \
                        --wait \
                        --timeout 10m \
                        --atomic \
                        --namespace "$TARGET_ENV" \
                        --values ./helm/environments/${TARGET_ENV}.yaml \
                        --set image.repository="${AZURE_REGISTRY_ADDRESS}/${APP_NAME}" \
                        --set image.tag="${SELECTED_TAG}" \
                        --set ingress.host="${INGRESS_HOST}" \
                        --set env.secrets.FLASK_DB_USER="${DATABASE_CRED_USR}" \
                        --set env.secrets.FLASK_DB_PASS="${DATABASE_CRED_PSW}"
                        '''
                    }
                }
            }
        }
    }
    post {
        cleanup {
            cleanWs()
        }
    }
}
